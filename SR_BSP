LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
USE ieee.numeric_std.ALL;

ENTITY shift_reg IS
	   PORT(
           clk    : IN std_logic;
           rst    : IN std_logic;
           ld     : IN std_logic;
           d_in   : IN std_logic;
              stuff1   : OUT std_logic;
              stuff0   : OUT std_logic;
  	           d_out    : OUT std_logic);
END shift_reg;

ARCHITECTURE rtl OF shift_reg IS
--FUNCTION s1(b : std_logic_vector(n-1 DOWNTO 0) ) RETURN std_logic IS
--VARIABLE tmp : std_logic;
--BEGIN
-- tmp :='1';
-- FOR i IN 0 TO n-1 LOOP
--  tmp := tmp and b(i);
-- END LOOP;
-- RETURN(tmp);
--END;
--
--FUNCTION s0(b : std_logic_vector(n-1 DOWNTO 0) ) RETURN std_logic IS
-- VARIABLE tmp : std_logic;
--BEGIN
-- tmp :='0';
-- FOR i IN 0 TO n-1 LOOP 
--  tmp := tmp or b(i);
-- END LOOP;
-- RETURN (NOT tmp);
--END;

SIGNAL temp  : std_logic_vector(4 DOWNTO 0);

BEGIN
--Shifting the bits

PROCESS(clk,rst)
BEGIN
IF(rst='1') THEN
 temp <=(others=>'0');
ELSIF(falling_edge(clk)) THEN
 IF(ld='1') THEN
  d_out <=temp(0);
  temp(4) <=d_in;
  FOR i IN 0 TO 3 LOOP
   temp(i)<=temp(i+1);
  END LOOP;
 END IF;
END IF;
END PROCESS;

--Stuffing when required

PROCESS(clk,rst) 
BEGIN
IF(rst='1') THEN
  stuff1 <='0';
ELSIF( falling_edge(clk) ) THEN
 IF(temp="11110" and d_in='1') THEN
  stuff1 <='1';
 ELSE
  stuff1 <='0';
 END IF;
END IF;
END PROCESS;

PROCESS(clk,rst)
BEGIN
IF(rst='1') THEN
 stuff0 <='0';
ELSIF(falling_edge(clk)) THEN
 IF(temp="00001" and d_in='0') THEN
  stuff0 <='1';
 ELSE
  stuff0 <='0';
 END IF;
END IF;
END PROCESS;

END rtl;
     
